#!/bin/bash
#
# anygrep: Grep through more than just plain text files
#

# Strictly disallow uninitialized variables and exit on command failures (even in pipes)
set -Eeuo pipefail

# Define program name and version
myname=$(basename "$0")
myversion=1.0.0

# Help function, no arguments required
function help() {
	cat <<-EOF
	$myname $myversion
	This script is design to grep simply anything: from pdfs, to odfs and beyond.

	Usage: $myname [OPTION(S)] <PATTERN> [FILES(S)]
	    --help              Display this help message and exit
	    *, *                Any valid grep parameter; Use \`grep --help\`

	$myname honors the GREPBIN environment variable, which defines the binary to
	use for grepping. For example a useful alternative might be 'pcregrep'.

	Examples:   # $myname -in5 whatis Document.odt
	    # GREPBIN=pcregrep $myname -iMH "coherent light" physics.pdf
	    # find . -type f -exec $myname -iH "which document contains" {} \;

	Copyright (c) Gordian Edenhofer <gordian.edenhofer@gmail.com>
	The script requires bash>=4.2, zip, sed, libxml2 and poppler.
	EOF
}

# Preserve the previous IFS (Internal Field Separator) settings
previous_IFS=${IFS}
# Solely escape proper spaces not those with baskslashes
IFS=$(echo -en "\n\b")

# Loop through parameters and split it into a file_list, grep_parms and the search_pattern
file_list=()
grep_parms=()
search_pattern=""
for option in "$@"; do
	case "${option}" in
		-H|--with-filename)
			with_filename="true";;
		-h|--no-filename)
			with_filename="false";;
		-L|--files-without-match)
			with_filename_without_match="true"
			with_filename="false"
			with_text="false";;
		-l|--files-with-matches)
			with_filename="true"
			with_text="false";;
		--help)
			help
			exit 0;;
		--*)
			# Match '--' to prevent a later match with '-'
			grep_parms+=("${option}");;
		-*)
			# Intercept previously explicitly matched grep options from a multi-option option
			if [[ "${option}" == *"H"* ]]; then
				option="${option//H}"
				with_filename="true"
			elif [[ "${option}" == *"h"* ]]; then
				option="${option//h}"
				with_filename="false"
			elif [[ "${option}" == *"L"* ]]; then
				option="${option//L}"
				with_filename_without_match="true"
				with_filename="false"
				with_text="false"
			elif [[ "${option}" == *"l"* ]]; then
				option="${option//l}"
				with_filename="true"
				with_text="false"
			fi
			# Match any parameter starting with exactly one '-'
			grep_parms+=("${option}");;
		*)
			if [[ -z ${search_pattern} ]]; then
				# Match the first non grep_parm string in the argument array
				search_pattern="${option}"
			else
				file_list+=("${option}")
			fi;;
	esac
done

# Expect that no match is found, hence the default exit code should be one
exit_code=1
# Print filenames if more than one file is given and not specified otherwise
[[ ${#file_list[@]} -gt 1 && -z "${with_filename:-""}" ]] && with_filename="true"
# Do not print filenames by default
with_filename="${with_filename:-"false"}"
# Print filenames of files which did not match the pattern by default
with_filename_without_match="${with_filename_without_match:-"false"}"
# Print normal output by default
with_text="${with_text:-"true"}"
# Use `grep` as default grepping binary
GREPBIN="${GREPBIN:-"grep"}"

# Stupid debug code
if [[ -n ${DEBUG:-""} ]]; then
	echo "file_list=\"${file_list[*]}\""
	echo "grep_parms=\"${grep_parms[*]}\""
	echo "search_pattern=\"${search_pattern}\""
	echo "--------"
	echo "with_filename=\"${with_filename}\""
	echo "with_filename_without_match=\"${with_filename_without_match}\""
	echo "with_text=\"${with_text}\""
	echo "--------"
fi

# Exit if no search pattern or no filename was given
[[ ${#file_list[@]} -lt 1 ]] && echo "No file specified" && exit 2
[[ -z ${#search_pattern} ]] && echo "No search string specified" && exit 2

for file in "${file_list[@]}"; do
	# Using $(file) is possible as well and it is properly implemented but commented out in the follwing code block
	ext=${file##*.} #ext=$(file -L -p -b ${file}) && ext=${ext%% *}
	grep_exit_code=0
	case "$ext" in
		odt|ods|odp|sxi) #OpenDocument)
			# An odf file (Open Document Format e.g. odt) is simply a zipped folder in which content.xml contains the actual text in xml in format
			# The sed command removes any content in between angle brackets ('<' and '>'), it is not an ideal solution but it gets the job done
			text=$(unzip -p "${file}" content.xml | xmllint --nowarning --format - | sed 's/<[^>]*>//g' | ${GREPBIN} --color=always "${grep_parms[@]}" "${search_pattern}") || grep_exit_code=$?;;
		pdf) #PDF)
			# pdftotext and pdfinfo is provided by poppler which should be isntalled if either cups, evince, libreoffice etc. is
			# Search through the properties of a pdf file and the content
			text=$(pdfinfo "${file}" | head -n6 | ${GREPBIN} --color=always "${grep_parms[@]}" "${search_pattern}") || true
			text=${text}$(pdftotext -q "${file}" - | ${GREPBIN} --color=always "${grep_parms[@]}" "${search_pattern}") || grep_exit_code=$?;;
		*)
			text=$(${GREPBIN} --color=always "${grep_parms[@]}" "${search_pattern}" "${file}") || grep_exit_code=$?;;
	esac
	# Break if grep reports an error
	[[ ${grep_exit_code} -eq 2 ]] && exit 2

	# Exit cleanly if at any point some text was found
	[[ -n "${text}" ]] && exit_code=0

	# Print output if a match was found
	if [[ -n "${text}" ]]; then
		# Print merely matching text
		[[ ${with_filename,,} == "false" && ${with_text,,} == "true" ]] && echo "${text}"
		# Print matching text and filename
		[[ ${with_filename,,} == "true" && ${with_text,,} == "true" ]] && echo -e "\e[35m${file}\e[0m\e[94m:\e[0m${text//$'\n'/$'\n'"\e[35m${file}\e[0m\e[94m:\e[0m"}"
		# Print merely the filename
		[[ ${with_filename,,} == "true" && ${with_text,,} == "false" ]] && echo -e "\e[35m${file}\e[0m\e[94m\e[0m"
	elif [[ -z "${text}" && ${with_filename_without_match,,} == "true" ]]; then
		echo -e "\e[35m${file}\e[0m\e[94m\e[0m"
	fi
done

# Restore previous IFS settings
IFS=${previous_IFS}

exit ${exit_code}
