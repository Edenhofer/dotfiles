#!/bin/bash

# Strictly disallow uninitialized Variables
set -u
# Exit if a single command breaks and its failure is not handled accordingly
set -e

# Define program name and version
myname=$(basename "$0")
myversion=1.0.0

# Useful global parameters
SSH_SOCKS_PORT="${SSH_SOCKS_PORT:-"9066"}"
UNPRIV_USER="${UNPRIV_USER:-"nobody"}"
SUDO_CMD="${SUDO_CMD:-"sudo -u ${UNPRIV_USER} --"}"

# Help function, no arguments required
function help() {
	cat <<-EOF
	$myname $myversion
	A privacy enabled version of chromium using a proxy or Tor as entry point,
	utilizing various chromium command line flags, a clean temporary environment
	and restricted system access in order to disguise the user's location and to
	hide identifiable information.

	In order to hear sound you must confiure pulseaudio to allow network access
	since the browser will not be running under you user. (Use e.g. \`paprefs\`.)
	Furthermore the script will grant local X access for the same reasons.

	Usage: $myname [PROXY] [OPTION(S)]
	    PROXY           Hostname evaluated by ssh to use as socks proxy
	    OPTIONS         Parameters passed on to chromium
	    --help          Display this help message and exit

	Some proxy-names bare a special meaning and are not evaluated by ssh:
	    tor             Use a local tor entry point
	    local           Do not use a proxy but set up a privacy enable environment

	Environment variables:
	    SSH_SOCKS_PORT      SSH port to use for socks,
	                        defaults to '9066'
	    UNPRIV_USER         System user running the browser,
	                        defaults to 'nobody'
	    SUDO_CMD            Privilege escalation command,
	                        defaults to 'sudo -u \${UNPRIV_USER}'

	$myname depends on the user's configuration for ssh connections and therefore
	allows the ssh aliases and credentials to be used for proxying.

	Examples:   $ $myname
	    $ $myname tor    # Equivalent to the above
	    $ $myname user@host

	Copyright (c) Gordian Edenhofer <gordian.edenhofer@gmail.com>
	The script requires chromium, bash>=4.2, ssh, sudo and unzip.
	EOF
}

# Lazy recursive clean up of temporary directories
function clean_up() {
	[[ -n "${tmpdir:-""}" ]] && ${SUDO_CMD} find "${tmpdir}" -type d -exec chmod u+x {} \; && ${SUDO_CMD} rm -rf "${tmpdir}"
	# Kill socks_pid if it is defined since this means a socks process was started previously
	[[ -n "${socks_pid:-""}" ]] && kill "${socks_pid}"

	echo
	exit
}
# Trap a normal exit as well as termination signals
trap clean_up EXIT SIGHUP SIGINT SIGTERM

# Sane starting parameters for chromium
chromium_args=(
	# Disable flash for sure
	'--disable-plugins-discovery'
	'--disable-internal-flash'
	# Limit the amount of trackable information (disables interactive 3D graphics)
	'--disable-webgl'
)
# Check for trackability at
# https://panopticlick.eff.org/results?#fingerprintTable
# http://uniquemachine.org/

# Sensible extensions to have upon first startup
chromium_extensions=(
	'cjpalhdlnbpafiamejdnhcphjbkeiagm'	# uBlock Origin
	'nffaoalbilbmmfgbnbgppjihopabppdk'	# Video Speed Control
	'dbepggeogbaibhgnhhndojpepiihcmeb'	# Vimium
)


# Simple and stupid argument check since only one argument can be passed
case "${1:-}" in
	"tor"|"")
		if which systemctl &>/dev/null; then
			[[ $(systemctl is-active tor) != "active" ]] && systemctl start tor
		else
			echo "Could not verify that Tor is running, please make sure it is. Proceeding anyway!"
		fi

		chromium_args+=(
			'--proxy-server='"socks5://localhost:9050"
			# Disable local DNS queries which might circumvent the socks proxy
			'--host-resolver-rules='"MAP * ~NOTFOUND , EXCLUDE localhost"
		)
		;;
	"local")
		;;
	-h|--help)
		help
		exit 0
		;;
	-*)
		help
		exit 1
		;;
	*)
		# Start a socks proxy via ssh
		ssh ${1:-} -TND "${SSH_SOCKS_PORT}" & socks_pid=$!
		sleep 0.3

		chromium_args+=(
			'--proxy-server='"socks5://localhost:${SSH_SOCKS_PORT}"
			# Disable local DNS queries which might circumvent the socks proxy
			'--host-resolver-rules='"MAP * ~NOTFOUND , EXCLUDE localhost"
		)
		;;
esac
shift

if ! which chromium &>/dev/null; then
	echo "Could not find chromium!"
	exit 1
fi

# Create a temporary dir for the nobody user
tmpdir=$(${SUDO_CMD} mktemp -q -d "${TMPDIR:-"/tmp"}/private_chromium".XXX)

# Add chromium extensions
for i in "${chromium_extensions[@]}"; do
	${SUDO_CMD} curl -s -o "${tmpdir}/${i}.crx" -L "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=$(chromium --product-version)&x=id%3D${i}%26uc"
	${SUDO_CMD} unzip -q "${tmpdir}/${i}.crx" -d "${tmpdir}/${i}" && true
	${SUDO_CMD} find "${tmpdir}/${i}" -type d -exec chmod u+x {} \;
	ext="${tmpdir}/${i},${ext:-""}"
done
[[ -n "${ext:-""}" ]] && chromium_args+=('--load-extension='"${ext}")

# Grant access to the X server
xhost local:root

# Actually invoke the browser
${SUDO_CMD} env -i DISPLAY="${DISPLAY}" HOME="${tmpdir}" \
	chromium "${chromium_args[@]}" "${@}" https://check.torproject.org/ || exit_code=$?

exit "${exit_code:-"0"}"
